name: CI/CD Pipeline

# Trigger the workflow on push to main branch or pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Define jobs
jobs:
  # Continuous Integration Job
  test:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Python
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    # Step 3: Cache Python dependencies
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    # Step 4: Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 5: Run tests
    - name: Run tests with pytest
      run: |
        export PYTHONPATH=.
        pytest tests/ -v --tb=short
    
    # Step 6: Run linting (code quality check)
    - name: Run code linting
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Continuous Deployment Job
  build-and-deploy:
    needs: test  # Only run if tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Step 4: Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/cicd-demo-app:latest
          ${{ secrets.DOCKER_USERNAME }}/cicd-demo-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Step 5: Deploy to production (using a simple webhook approach)
    - name: Deploy to production
      if: success()
      run: |
        echo "ðŸš€ Deployment would happen here!"
        echo "Image: ${{ secrets.DOCKER_USERNAME }}/cicd-demo-app:latest"
        echo "This is where you'd call your deployment service"